swagger: '2.0'
info:
  title: Sunglasses-io API
  description: An API to support Sunglasses.io.
  version: '1.0.0'
host: api.sunglasses.io (localhost:3001 for dev)
schemes:
  - https
basePath: /api
produces:
  - application/json
paths:
  /brands:
    get:
      tags:
        - Brands
      summary: Returns all brands of sunglasses in inventory
      operationId: retrieveBrands
      responses:
        '200':
          description: Retrieved all brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brands'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: No brands found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands/{id}/products:
    get:
      tags:
        - Products by Brand
      summary: Returns all products of sunglasses of specified brand
      operationId: retrieveProductsByBrand
      parameters:
        - name: id
          in: path
          required: true
          description: Id of a specific brand
          type: string
      responses:
        '200':
          description: Retrieved products by brand ID
          schema:
            type: array
            items:
              $ref: '#/definitions/Products'
        '400':
          description: Invalid brand ID
          schema:
            $ref: '#/definitions/Errors'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /products:
    get:
      tags:
        - Products
      summary: Returns products of sunglasses filtered by user query. Returns all products if query is empty.
      operationId: retrieveProducts
      parameters:
        - name: query
          in: path
          required: false
          description: User query
          type: string
      responses:
        '200':
          description: Retrieved all products
          schema:
            type: array
            items:
              $ref: '#/definitions/Products'
        '404':
          description: No products match query
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
        - User Login
      summary: Login with username and password
      operationId: loginUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: login
          in: body
          required: true
          description: Login criteria
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: Now logged in
          schema:
            type: string
        '400':
          description: Incorrectly formatted request
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Invalid username or password
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/cart:
    get:
      tags:
        - Shopping Cart
      summary: Retrieve signed-in user cart
      operationId: retrieveCart
      parameters:
        - name: accessToken
          in: header
          required: true
          description: User access token
          type: string
      responses:
        '200':
          description: Retrieved user cart
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
        '401':
          description: Access not authorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/cart/{productId}:
    post:
      tags:
        - Shopping Cart
      summary: Add product to user cart or increment quantity if item already in cart
      parameters:
        - name: productId
          in: path
          required: true
          description: Id of product to add to user cart
          type: string
        - name: accessToken
          in: header
          required: true
          description: User access token
          type: string
      responses:
        '200':
          description: Product added to user cart
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
        '400':
          description: Invalid product ID
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Access not authorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Shopping Cart
      summary: Delete product from cart
      operationId: deleteCartItems
      parameters:
        - name: productId
          in: path
          required: true
          description: ID of product to remove from cart
          type: string
        - name: accessToken
          in: header
          required: true
          description: The users access token
          type: string
      responses:
        '200':
          description: Product deleted from cart
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
        '400':
          description: Invalid product ID
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Access not authorized
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Product item not in cart
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Errors'
definitions:
  Brands:
    type: object
    properties:
      id:
        type: string
        description: ID for a specific brand
      name:
        type: string
        description: Brand name of sunglasses
    required:
      - id
      - name
  Products:
    type: object
    properties:
      id:
        type: string
        description: ID for specific model of sunglasses
      categoryId:
        type: string
        description: ID for brand that makes the sunglasses product
      name:
        type: string
        description: Model name of the sunglasses product
      description:
        type: string
        description: A short description of the model of sunglasses
      price:
        type: number
        description: Unit price of the sunglasses product
      imageUrls:
        type: array
        items:
          type: string
        description: Three urls for jpg photos of the specific model of sunglasses
    required:
      - id
      - categoryId
      - name
      - price
  Login:
    type: object
    properties:
      username:
        type: string
        description: Username
      password:
        type: string
        description: Password
    required:
      - username
      - password
  Cart:
    type: object
    properties:
      id:
        type: string
        description: ID for specific model of sunglasses
      categoryId:
        type: string
        description: ID for brand that makes the sunglasses product
      name:
        type: string
        description: Model name of the sunglasses product
      description:
        type: string
        description: A short description of the model of sunglasses
      price:
        type: number
        description: Unit price of the sunglasses product
      imageUrls:
        type: array
        items:
          type: string
        description: Three urls for jpg photos of the specific model of sunglasses
      quantity:
        type: integer
        description: The quanity of the specified item in the cart
    required:
      - id
      - categoryId
      - name
      - price
      - quantity
  Errors:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
#
# **********************
#    4xx Client Errors
#  **********************
#  400 Bad Request
#  401 Unauthorized
#  402 Payment Required
#  403 Forbidden
#  404 Not Found
#  405 Method Not Allowed
#  406 Not Acceptable
#  407 Proxy Authentication Required
#  408 Request Timeout
#  409 Conflict
#  410 Gone
#  411 Length Required
#  412 Precondition Failed
#  413 Request Entity Too Large
#  414 Request-URI Too Long
#  415 Unsupported Media Type
#  416 Requested Range Not Satisfiable
#  417 Expectation Failed
#  418 I'm a teapot (RFC 2324)
#  420 Enhance Your Calm (Twitter)
#  422 Unprocessable Entity (WebDAV)
#  423 Locked (WebDAV)
#  424 Failed Dependency (WebDAV)
#  425 Reserved for WebDAV
#  426 Upgrade Required
#  428 Precondition Required
#  429 Too Many Requests
#  431 Request Header Fields Too Large
#  444 No Response (Nginx)
#  449 Retry With (Microsoft)
#  450 Blocked by Windows Parental Controls (Microsoft)
#  451 Unavailable For Legal Reasons
#  499 Client Closed Request (Nginx)

# **********************
#    All Routes
#  **********************
#  GET /api/brands
#  GET /api/brands/:id/products
#  GET /api/products (optional query)
#  POST /api/login
#  GET /api/me/cart
#  POST /api/me/cart/:productId
#  DELETE /api/me/cart/:productId

